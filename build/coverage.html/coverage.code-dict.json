{"/home/travis/build/npmtest/node-npmtest-foreman/test.js":"/* istanbul instrument in package npmtest_foreman */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-foreman/lib.npmtest_foreman.js":"/* istanbul instrument in package npmtest_foreman */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_foreman = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_foreman = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-foreman/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-foreman && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_foreman */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_foreman\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_foreman.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_foreman.rollup.js'] =\n            local.assetsDict['/assets.npmtest_foreman.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_foreman.__dirname + '/lib.npmtest_foreman.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-foreman/node_modules/foreman/nf.js":"#!/usr/bin/env node\n// Copyright IBM Corp. 2012,2015. All Rights Reserved.\n// Node module: foreman\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\nvar path    = require('path');\nvar events  = require('events');\nvar fs      = require('fs');\nvar colors  = require('./lib/colors');\nvar quote   = require('shell-quote').quote;\n\nvar program = require('commander');\nvar display = require('./lib/console').Console;\n\nvar nf = require('./package.json');\n\nprogram.version(nf.version);\nprogram.option('-j, --procfile <FILE>' ,'load procfile FILE','Procfile');\nprogram.option('-e, --env      <FILE>' ,'load environment from FILE, a comma-separated list','.env');\nprogram.option('-p, --port     <PORT>' ,'start indexing ports at number PORT',0);\n\n\n// Foreman Event Bus/Emitter //\n\nvar emitter = new events.EventEmitter();\nemitter.once('killall',function(signal){\n  display.Done(\"Killing all processes with signal \", signal);\n});\nemitter.setMaxListeners(50);\n\nvar _proc = require('./lib/proc');\nvar start = _proc.start;\nvar once  = _proc.once;\n\nvar _procfile = require('./lib/procfile');\nvar loadProc  = _procfile.loadProc;\n\nvar _envs    = require('./lib/envs');\nvar loadEnvs = _envs.loadEnvs;\n\nvar _requirements    = require('./lib/requirements');\nvar getreqs          = _requirements.getreqs;\nvar calculatePadding = _requirements.calculatePadding;\n\nvar startProxies = require('./lib/proxy').startProxies;\nvar startForward = require('./lib/forward').startForward;\n\n// Kill All Child Processes on SIGINT\nprocess.once('SIGINT', function() {\n  display.Warn('Interrupted by User');\n  emitter.emit('killall', 'SIGINT');\n});\n\nprogram\n  .command('start [procs]')\n  .usage('[Options] [Processes] e.g. web=1,log=2,api')\n  .option('-s, --showenvs'             ,'show ENV variables on start',false)\n  .option('-x, --proxy     <PORT>'     ,'start a load balancing proxy on PORT')\n  .option('--ssl-key       <KEY FILE>' ,'a key file to use when proxying SSL')\n  .option('--ssl-cert      <CERT FILE>','a cert file to use when proxying SSL')\n  .option('-f, --forward   <PORT>'     ,'start a forward proxy on PORT')\n  .option('-i, --intercept <HOSTNAME>' ,'set forward proxy to intercept HOSTNAME',null)\n  .option('-r, --raw'                  ,'raw log output with no app name, timestamp, wrap or trim', false)\n  .option('-t, --trim      <N>'        ,'trim logs to N characters',0)\n  .option('-w, --wrap'                 ,'wrap logs (negates trim)')\n  .description('Start the jobs in the Procfile')\n  .action(function(args) {\n\n    var command = this;\n\n    var envs = loadEnvs(program.env);\n\n    var proc = loadProc(program.procfile);\n\n    if(!proc) { return; }\n\n    if(command.showenvs){\n      for(var key in envs){\n        display.Alert(\"env %s=%s\", key, envs[key]);\n      }\n    }\n\n    var reqs = getreqs(args, proc);\n\n    display.padding  = calculatePadding(reqs);\n\n    display.raw = command.raw;\n\n    if(command.wrap) {\n      display.wrapline = process.stdout.columns - display.padding - 7;\n      display.trimline = 0;\n      display.Alert('Wrapping display Output to %d Columns', display.wrapline);\n    } else {\n      display.trimline = command.trim;\n      if(display.trimline > 0){\n        display.Alert('Trimming display Output to %d Columns', display.trimline);\n      }\n    }\n\n    if(command.forward) {\n      startForward(command.forward, command.intercept, emitter);\n    }\n\n    startProxies(reqs, proc, command, emitter, program.port || envs.PORT || process.env.PORT || 5000);\n\n    start(proc, reqs, envs, program.port || envs.PORT || process.env.PORT || 5000, emitter);\n  });\n\nprogram\n  .command('run <COMMAND...>')\n  .usage('[Options]')\n  .option('-s, --showenvs', 'show ENV variables on start', false)\n  .description('Run a one off process using the ENV variables')\n  .action(function(args) {\n\n    var command = this;\n\n    var envs = loadEnvs(program.env);\n\n    var callback = function(code) {\n      process.exit(code);\n    };\n\n    if(!args || !args.length) { return; }\n\n    var input = quote(args);\n\n    if(command.showenvs) {\n      for(var key in envs){\n        display.Alert(\"env %s=%s\",key,envs[key]);\n      }\n    }\n\n    display.trimline = process.stdout.columns - 5;\n\n    once(input, envs, callback);\n  });\n\nvar exporters = require('./lib/exporters');\n\nprogram\n  .command('export [PROCS]')\n  .option('-a, --app  <NAME>' ,'export upstart application as NAME','foreman')\n  .option('-u, --user <NAME>' ,'export upstart user as NAME','root')\n  .option('-o, --out  <DIR>'  ,'export upstart files to DIR','.')\n  .option('-c, --cwd  <DIR>'  ,'change current working directory to DIR')\n  .option('-g, --gid  <GID>'  ,'set gid of upstart config to GID')\n  .option('-l, --log  <DIR>'  ,'specify upstart log directory','/var/log')\n  .option('-t, --type <TYPE>' ,'export file to TYPE (default upstart)','upstart')\n  .option('-m, --template <DIR>' ,'use template folder')\n  .description('Export to an upstart job independent of foreman')\n  .action(function(procArgs) {\n\n    var command = this;\n\n    var envs = loadEnvs(program.env);\n\n    var procs = loadProc(program.procfile);\n\n    if(!procs) { return; }\n\n    var req  = getreqs(procArgs, procs);\n\n    // Variables for Upstart Template\n    var config = {\n        application : command.app,\n        cwd         : path.resolve(process.cwd(), command.cwd || ''),\n        user        : command.user,\n        logs        : command.log,\n        envs        : envs,\n        group       : command.gid || command.user,\n        template    : command.template\n    };\n\n    config.envfile = path.resolve(program.env);\n\n    var writeout;\n    if(exporters[command.type]) {\n      writeout = exporters[command.type];\n    } else {\n      display.Error(\"Unknown Export Format\", command.type);\n      process.exit(1);\n    }\n\n    // Check for Upstart User\n    // friendly warning - does not stop export\n    var userExists = false;\n    fs.readFileSync('/etc/passwd')\n      .toString().split(/\\n/).forEach(function(line) {\n        if(line.match(/^[^:]*/)[0] == config.user){\n          userExists = true;\n        }\n      });\n\n    if(!userExists) {\n      display.Warn(display.fmt(\"User %s Does Not Exist on System\", config.user));\n    }\n\n    var baseport = parseInt(program.port || envs.PORT || process.env.PORT || 5000);\n    var baseport_i = 0;\n    var baseport_j = 0;\n    var envl = [];\n\n    config.processes = [];\n\n    // This is ugly because of shitty support for array copying\n    // Cleanup is definitely required\n    for(var key in req) {\n\n      var c = {};\n      var cmd = procs[key];\n\n      if (!cmd){\n        display.Warn(\"Required Key '%s' Does Not Exist in Procfile Definition\", key);\n        continue;\n      }\n\n      var n = req[key];\n\n      config.processes.push({process:key, n: n});\n      c.process = key;\n      c.command = cmd;\n\n      for(var _ in config){\n        c[_] = config[_];\n      }\n\n      c.numbers = [];\n      for(var i=1; i <= n; i++) {\n\n        var conf = {};\n        conf.number = i;\n\n        for(_ in c){\n          conf[_] = c[_];\n        }\n\n        conf.port = baseport + baseport_i + baseport_j * 100;\n\n        envl = [];\n        for(key in envs) {\n          envl.push({\n            key: key,\n            value: envs[key]\n          });\n        }\n        envl.push({ key: 'PORT', value: conf.port });\n        envl.push({ key: 'FOREMAN_WORKER_NAME', value: conf.process + '.' + conf.number });\n\n        conf.envs = envl;\n\n        // Write the APP-PROCESS-N.conf File\n        writeout.foreman_app_n(conf,command.out);\n\n        baseport_i++;\n        c.numbers.push({number: i});\n      }\n\n      envl = [];\n      for(key in envs){\n        envl.push({\n          key: key,\n          value: envs[key]\n        });\n      }\n\n      c.envs = envl;\n\n      // Write the APP-Process.conf File\n      writeout.foreman_app(c,command.out);\n\n      baseport_i = 0;\n      baseport_j++;\n    }\n\n    // Write the APP.conf File\n    writeout.foreman(config,command.out);\n\n  });\n\nprogram.parse(process.argv);\n\nif (!process.argv.slice(2).length) {\n  console.log(colors.cyan('   _____                           '));\n  console.log(colors.cyan('  |   __|___ ___ ___ _____ ___ ___ '));\n  console.log(colors.yellow('  |   __| . |  _| -_|     |   |   |'));\n  console.log(colors.magenta('  |__|  |___|_| |___|_|_|_|_^_|_|_|'));\n  program.outputHelp();\n  process.exit(1);\n}\n","/home/travis/build/npmtest/node-npmtest-foreman/node_modules/foreman/lib/colors.js":"// Copyright IBM Corp. 2012,2016. All Rights Reserved.\n// Node module: foreman\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\nvar reset = '\\x1B[0m';\nvar colors = {\n  magenta:         '\\x1B[35m',\n  blue:            '\\x1B[34m',\n  cyan:            '\\x1B[36m',\n  green:           '\\x1B[32m',\n  yellow:          '\\x1B[33m',\n  red:             '\\x1B[31m',\n  bright_magenta:  '\\x1B[35m',\n  bright_cyan:     '\\x1B[36m',\n  bright_blue:     '\\x1B[34m',\n  bright_green:    '\\x1B[32m',\n  bright_yellow:   '\\x1B[33m',\n  bright_red:      '\\x1B[31m',\n};\n\nfunction identity(self) {\n  return self;\n}\n\nfunction colorizer(color) {\n  if (process.stdout.isTTY) {\n    return function (str) {\n      return colors[color] + str + reset;\n    };\n  } else {\n    return identity;\n  }\n}\n\nmodule.exports.colors = [];\n\nvar colorKeys = Object.keys(colors);\ncolorKeys.forEach(function(name) {\n  var colorFn = colorizer(name);\n  module.exports[name] = colorFn;\n  module.exports.colors.push(colorFn);\n});\n\nmodule.exports.colors_max = module.exports.colors.length;\n","/home/travis/build/npmtest/node-npmtest-foreman/node_modules/foreman/lib/console.js":"// Copyright IBM Corp. 2012,2016. All Rights Reserved.\n// Node module: foreman\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\nvar util = require('util');\nvar colors = require('./colors');\n\nfunction wrap(log, length, res) {\n  if(!res) { res = []; }\n  if(log.length <= length) {\n    res.push(log);\n    return res;\n  } else {\n    res.push(log.substr(0, length));\n    return wrap(log.substr(length), length, res);\n  }\n}\n\nvar trimEnd = '…';\nvar ansiEscapes = /\\x1b\\[(\\d+([A-GJKSTm]|;\\d+[Hf])|6n|s|u|\\?25[lh])/g;\n\nfunction stripANSI(str) {\n  return str.replace(ansiEscapes, '');\n}\n\n// Try to leave the escape sequences intact if possible, but strip them\n// if we need to trim the line so that we don't put the terminal in a weird\n// state by stripping a reset code.\nfunction trim(line, n) {\n  line = line.replace(/\\s+$/, ''); // aka, .trimRight()\n  var stripped = stripANSI(line);\n  if (stripped.length <= n) {\n    return line;\n  } else {\n    return stripped.substr(0, n) + trimEnd;\n  }\n}\n\nfunction Console(logger) {\n  logger = logger || console;\n  this.padding = 25;\n\n  this.trimline  = 10;\n  this.wrapline = 500;\n\n  this.fmt = function fmt() {\n    return util.format.apply(null, arguments);\n  };\n\n  this.pad = function pad(string, n) {\n    var l = string.length;\n    var o = string;\n    for(var i = l; i < n; i++) {\n      o += \" \";\n    }\n    return o;\n  };\n\n  this.trim = trim;\n\n  // Process Specific Loggers //\n  this.info = function info(key, proc, string) {\n    var stamp = (new Date().toLocaleTimeString()) + \" \" + key;\n    logger.log(proc.color(this.pad(stamp,this.padding)), colors.cyan(string));\n  };\n\n  this.error = function error(key, proc, string) {\n    var stamp = (new Date().toLocaleTimeString()) + \" \" + key;\n    logger.error(proc.color(this.pad(stamp,this.padding)), colors.red(string));\n  };\n\n  this.log = function log(key, proc, string) {\n    var self = this;\n\n    if(self.raw) {\n      logger.log(string);\n      return;\n    }\n\n    string.split(/\\n/).forEach(function(line) {\n\n      if (line.trim().length === 0) { return; }\n\n      var stamp = (new Date().toLocaleTimeString()) + \" \" + key;\n\n      if(self.trimline>0){\n        line = self.trim(line,self.trimline);\n      }\n\n      var delimiter = \" | \";\n\n      var wrapline;\n      if(self.wrapline === 0) {\n        wrapline = line.length;\n      } else {\n        wrapline = self.wrapline;\n      }\n\n      wrap(line, wrapline).forEach(function(l) {\n        logger.log(proc.color(self.pad(stamp,self.padding) + delimiter), l);\n        delimiter = \" |  > \";\n      });\n\n    });\n  };\n\n  // Foreman Loggers //\n\n  this.Alert = function Alert() {\n    logger.log(colors.green('[OKAY] '+ this.fmt.apply(null, arguments)));\n  };\n\n  this.Done = function Info() {\n    logger.log(colors.cyan('[DONE] ' + this.fmt.apply(null, arguments)));\n  };\n\n  this.Warn = function Warn() {\n    logger.warn(colors.yellow('[WARN] ' + this.fmt.apply(null, arguments)));\n  };\n\n  this.Error = function Error() {\n    logger.error(colors.bright_red('[FAIL] ' + this.fmt.apply(null,arguments)));\n  };\n\n}\n\nmodule.exports = Console;\nConsole.Console = new Console();\n","/home/travis/build/npmtest/node-npmtest-foreman/node_modules/foreman/lib/proc.js":"// Copyright IBM Corp. 2012,2016. All Rights Reserved.\n// Node module: foreman\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\nvar prog       = require('child_process');\n\nvar cons       = require('./console').Console;\n\nvar _colors    = require('./colors');\nvar colors_max = _colors.colors_max;\nvar colors     = _colors.colors;\n\nvar os         = require('os');\nvar platform   = os.platform();\n\n// Run a Specific Process\n// - Key is a Process Name and Number\n// - Proc is an object with the launch properties\n//\n// i.e. web=2 becomes the web.2 key\nfunction run(key, proc, emitter) {\n  var file, args;\n  if (platform === 'win32') {\n    file = process.env.comspec || 'cmd.exe';\n    args = ['/s', '/c', proc.command];\n  } else {\n    file = '/bin/sh';\n    args = ['-c', proc.command];\n  }\n  var child = prog.spawn(file, args, { env: proc.env });\n\n  child.stdout.on('data', function(data) {\n    cons.log(key, proc, data.toString());\n  });\n\n  child.stderr.on('data', function(data) {\n    cons.log(key, proc, data.toString());\n  });\n\n  child.on('close', function(code) {\n    if(code === 0) {\n      cons.info(key, proc, \"Exited Successfully\");\n    } else {\n      cons.error(key, proc, \"Exited with exit code \" + code);\n    }\n  });\n\n  child.on('exit', function(code, signal) {\n    emitter.emit('killall', signal);\n  });\n\n  emitter.on('killall', function(signal) {\n    child.kill(signal);\n  });\n\n}\n\n// Run a Specific Process Once using the ENV variables\n// from the .env file\nfunction once(input, envs, callback) {\n  var file, args;\n  var proc = {\n    command : input,\n    env     : merge(merge({}, process.env), envs)\n  };\n\n  if (platform === 'win32') {\n    file = process.env.comspec || 'cmd.exe';\n    args = ['/s', '/c', proc.command];\n  } else {\n    file = '/bin/sh';\n    args = ['-c', proc.command];\n  }\n\n  var child = prog.spawn(file, args, { env: proc.env, stdio: 'inherit' });\n\n  child.on('close', function(code) {\n    callback(code);\n  });\n}\n\n// Figure Out What to Start Based on Procfile Processes\n// And Requirements Passed as Command Line Arguments\n//\n// e.g. web=2,api=3 are requirements\nfunction start(procs, requirements, envs, portarg, emitter){\n\n  var j = 0;\n  var k = 0;\n  var port = parseInt(portarg);\n\n  if(port < 1024) {\n    return cons.Error('Only Proxies Can Bind to Privileged Ports - '+\n                      'Try \\'sudo nf start -x %s\\'', port);\n  }\n\n\n  for(var key in requirements) {\n    var n = parseInt(requirements[key]);\n\n    for(var i = 0; i < n; i++) {\n\n      var color_val = (j + k) % colors_max;\n\n      if (!procs[key]) {\n        cons.Warn(\"Required Key '%s' Does Not Exist in Procfile Definition\", key);\n        continue;\n      }\n\n      var p = {\n        command : procs[key],\n        color   : colors[color_val],\n        env     : merge(merge({}, process.env), envs)\n      };\n\n      p.env.PORT = port + j + k * 100;\n      p.env.FOREMAN_WORKER_NAME = p.env.FOREMAN_WORKER_NAME || key + \".\" + (i + 1);\n\n      run(key + \".\" + (i + 1), p, emitter);\n\n      j++;\n\n    }\n    j = 0;\n    k++;\n  }\n}\n\n// Merge object b into object a\nfunction merge(a, b) {\n  if (a && b) {\n    for (var key in b) {\n      a[key] = b[key];\n    }\n  }\n  return a;\n}\n\nmodule.exports.start = start;\nmodule.exports.run   = run;\nmodule.exports.once  = once;\n","/home/travis/build/npmtest/node-npmtest-foreman/node_modules/foreman/lib/procfile.js":"// Copyright IBM Corp. 2012,2016. All Rights Reserved.\n// Node module: foreman\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\nvar fs   = require('fs');\nvar cons = require('./console').Console;\nvar path = require('path');\n\n// Parse Procfile\nfunction procs(procdata){\n\n  var processes = {};\n\n  procdata.toString().split(/\\n/).forEach(function(line) {\n    if(!line || line[0] === '#') { return; }\n\n    var tuple = /^([A-Za-z0-9_-]+):\\s*(.+)$/m.exec(line);\n\n    var prockey = tuple[1].trim();\n    var command = tuple[2].trim();\n\n    if(!prockey) {\n      throw new Error('Syntax Error in Procfile, Line %d: No Prockey Found');\n    }\n\n    if(!command) {\n      throw new Error('Syntax Error in Procfile, Line %d: No Command Found');\n    }\n\n    processes[prockey] = command;\n  });\n\n  return processes;\n}\n\n// Look for a Procfile at the Specified Location\nfunction loadProc(filename) {\n\n  try {\n    var data = fs.readFileSync(filename);\n    return procs(data);\n  } catch(e) {\n    cons.Warn(e.message);\n    if(fs.existsSync('package.json')) {\n      cons.Alert(\"package.json file found - trying 'npm start'\");\n      return procs(\"web: npm start\");\n    } else {\n      cons.Error(\"No Procfile and no package.json file found in Current Directory - See \" + path.basename(process.argv[1]) + \" --help\");\n      return;\n    }\n  }\n\n}\n\nmodule.exports.loadProc = loadProc;\nmodule.exports.procs    = procs;\n","/home/travis/build/npmtest/node-npmtest-foreman/node_modules/foreman/lib/envs.js":"// Copyright IBM Corp. 2012,2016. All Rights Reserved.\n// Node module: foreman\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\nvar fs   = require('fs');\nvar util = require('util');\nvar cons = require('./console').Console;\n\nfunction method(name) {\n  return function(o) {\n    return o[name].apply(o);\n  };\n}\n\n// Parse a Key=Value File Containing Environmental Variables\nfunction keyValue(data) {\n  var env = {};\n\n  data\n    .toString()\n    .replace(/^\\s*\\#.*$/gm,'')\n    .replace(/^\\s*$/gm,'')\n    .split(/\\n/)\n    .map(method('trim'))\n    .filter(notBlank)\n    .forEach(capturePair);\n\n  return env;\n\n  function notBlank(str) {\n    return str.length > 2;\n  }\n\n  function capturePair(line) {\n    var pair = line.split('=');\n    var key = pair[0].trim();\n    var rawVal = pair.slice(1).join('=').trim();\n    env[key] = parseValue(rawVal);\n  }\n\n  function parseValue(val) {\n    switch (val[0]) {\n      case '\"': return /^\"([^\"]*)\"/.exec(val)[1];\n      case \"'\": return /^'([^']*)'/.exec(val)[1];\n      default : return val.replace(/\\s*\\#.*$/, '');\n    }\n  }\n}\n\n// Given:\n/*\n{\n  \"top\": {\n    \"middle\": {\n      \"bottom\": \"value\"\n    },\n    \"other\": [ \"zero\", \"one\", \"two\" ]\n  },\n  \"last\": 42\n}\n*/\n// Get:\n/*\n{\n  \"TOP_MIDDLE_BOTTOM\": \"value\",\n  \"TOP_OTHER_0\": \"zero\",\n  \"TOP_OTHER_1\": \"one\",\n  \"TOP_OTHER_2\": \"two\",\n  \"LAST\": 42\n}\n*/\n// Flatten nested object structure\nfunction flattenJSON(json) {\n  var flattened = {};\n\n  walk(json, function(path, item) {\n    flattened[path.join('_').toUpperCase()] = item;\n  });\n\n  return flattened;\n\n  function walk(obj, visitor, path) {\n    var item;\n    path = path || [];\n    for (var key in obj) {\n      item = obj[key];\n      if (typeof item === 'object') {\n        walk(item, visitor, path.concat(key));\n      } else {\n        visitor(path.concat(key), item);\n      }\n    }\n  }\n}\n\n\n// Given a standard dictionary:\n/*\n{\n  \"TOP_MIDDLE_BOTTOM\": \"value\",\n  \"TOP_OTHER_0\": \"zero\",\n  \"TOP_OTHER_1\": \"one\",\n  \"TOP_OTHER_2\": \"two\",\n  \"LAST\": 42\n}\n*/\n// Return a key=value pair document\n/*\nTOP_MIDDLE_BOTTOM=value\nTOP_OTHER_0=zero\nTOP_OTHER_1=one\nTOP_OTHER_2=two\nLAST=42\n*/\nfunction dumpEnv(conf) {\n  var output = [];\n  for (var key in conf) {\n    output.push(key + '=' + conf[key]);\n  }\n  return output.sort().join('\\n') + '\\n';\n}\n\n// Loads a file as either a .env format or JSON format and returns it as a\n// simplified dictionary\nfunction loadEnvsFile(path) {\n  var env, data;\n\n  if(!fs.existsSync(path)) {\n    cons.Warn(\"No ENV file found\");\n    env = {};\n  } else {\n    data = fs.readFileSync(path);\n    try {\n      var envs_json = JSON.parse(data);\n      env = flattenJSON(envs_json, \"\", {});\n      cons.Alert(\"Loaded ENV %s File as JSON Format\", path);\n    } catch (e) {\n      env = keyValue(data);\n      cons.Alert(\"Loaded ENV %s File as KEY=VALUE Format\", path);\n    }\n  }\n  env.PATH = env.PATH || process.env.PATH;\n  return env;\n}\n\nfunction loadEnvs(path) {\n  var envs = path.split(',').map(loadEnvsFile).reduce(util._extend, {});\n  var sorted = Object.create(null);\n  Object.keys(envs).sort().forEach(function(k) {\n    sorted[k] = envs[k];\n  });\n  return sorted;\n}\n\nmodule.exports.loadEnvs = loadEnvs;\nmodule.exports.flattenJSON = flattenJSON;\nmodule.exports.keyValue = keyValue;\nmodule.exports.dumpEnv  = dumpEnv;\n","/home/travis/build/npmtest/node-npmtest-foreman/node_modules/foreman/lib/requirements.js":"// Copyright IBM Corp. 2012,2016. All Rights Reserved.\n// Node module: foreman\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\nfunction parseRequirements(req) {\n  var requirements = {};\n  req.toString().split(',').forEach(function(item) {\n    var tup = item.trim().split('=');\n    var key = tup[0];\n    var val;\n    if(tup.length > 1) {\n      val = parseInt(tup[1]);\n    } else {\n      val = 1;\n    }\n\n    requirements[key] = val;\n  });\n  return requirements;\n}\n\nfunction getreqs(args, proc) {\n  var req;\n  if(args && args.length > 0) {\n    // Run Specific Procs\n    req = parseRequirements(args);\n  } else {\n    // All\n    req = {};\n    for(var key in proc){\n      req[key] = 1;\n    }\n  }\n  return req;\n}\n\nfunction calculatePadding(reqs) {\n  var padding = 0;\n  for(var key in reqs){\n    var num = reqs[key];\n    var len = key.length + num.toString().length;\n    if(len > padding) {\n      padding = len;\n    }\n  }\n  return padding + 12;\n}\n\nmodule.exports.calculatePadding  = calculatePadding;\nmodule.exports.getreqs           = getreqs;\n","/home/travis/build/npmtest/node-npmtest-foreman/node_modules/foreman/lib/proxy.js":"// Copyright IBM Corp. 2012,2016. All Rights Reserved.\n// Node module: foreman\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\nvar fs   = require('fs');\nvar path = require('path');\nvar prog = require('child_process');\nvar util = require('util');\n\nvar cons = require('./console').Console;\n\nfunction f(key, j, ports, proc, reqs, portargs, localhost, emitter, ssl) {\n  var port = parseInt(ports[j]);\n  var ssl_port = (port === 80 ? 443 : (port + 443));\n\n  if(port > 0 && port < 1024 && process.getuid() !== 0) {\n    return cons.Error('Cannot Bind to Privileged Port %s Without Permission - Try \\'sudo\\'',port);\n  }\n\n  if(isNaN(port)) {\n    return cons.Warn('No Downstream Port Defined for \\'%s\\' Proxy', key);\n  }\n\n  if(!(key in proc)) {\n    return cons.Warn('Proxy Not Started for Undefined Key \\'%s\\'', key);\n  }\n\n  var upstream_size = reqs[key];\n  var upstream_port = parseInt(portargs) + j * 100;\n\n  var proxy = prog.fork(require.resolve('../proxy'), [], {\n    env: {\n      HOST: localhost,\n      PORT: port,\n      UPSTREAM_HOST: localhost,\n      UPSTREAM_PORT: upstream_port,\n      UPSTREAM_SIZE: upstream_size,\n      SSL_CERT: ssl.cert,\n      SSL_KEY: ssl.key,\n      SSL_PORT: port ? ssl_port : 0\n    }\n  });\n\n  var port_targets;\n\n  if(upstream_size === 1) {\n    port_targets = util.format('%d', upstream_port);\n  } else {\n    port_targets = util.format('(%d-%d)', upstream_port, upstream_port + upstream_size - 1);\n  }\n\n  cons.Alert('Starting Proxy Server [%s] %s -> %s', key, port, port_targets);\n  if (ssl.cert && ssl.key) {\n    cons.Alert('Starting Secure Proxy Server [%s] %s -> %s', key, ssl_port, port_targets);\n  }\n\n  proxy.on('message', function(msg) {\n    if ('http' in msg) {\n      emitter.emit('http', msg.http);\n    }\n    if ('https' in msg) {\n      emitter.emit('https', msg.https);\n    }\n  });\n\n  emitter.once('killall', function(signal) {\n    cons.Done('Killing Proxy Server on Port %s', port);\n    proxy.kill(signal);\n  });\n\n  proxy.on('exit', function(code, signal) {\n    emitter.emit('killall', signal);\n  });\n\n}\n\nfunction startProxies(reqs, proc, command, emitter, portargs) {\n\n  if ('proxy' in command) {\n\n    var localhost = 'localhost';\n\n    var ports = command.proxy.split(',');\n\n    var ssl = {\n      cert: '',\n      key:  ''\n    };\n    if ((command.sslKey && !command.sslCert) ||\n        (command.sslCert && !command.sslKey)) {\n      cons.Warn('SSL key and cert must both be supplied for SSL support');\n    }\n    if (command.sslKey && command.sslCert) {\n      command.sslKey = path.resolve(command.sslKey);\n      command.sslCert = path.resolve(command.sslCert);\n      if (!fs.existsSync(command.sslKey)) {\n        cons.Warn('SSL key (%s) does not exist', command.sslKey);\n      }\n      else {\n        ssl.key = command.sslKey;\n      }\n      if (!fs.existsSync(command.sslCert)) {\n        cons.Warn('SSL cert (%s) does not exist', command.sslCert);\n      }\n      else {\n        ssl.cert = command.sslCert;\n      }\n    }\n\n    Object.keys(reqs).forEach(function(key, i) {\n      f(key, i, ports, proc, reqs, portargs, localhost, emitter, ssl);\n    });\n  }\n\n}\n\nmodule.exports.startProxies = startProxies;\n","/home/travis/build/npmtest/node-npmtest-foreman/node_modules/foreman/lib/forward.js":"// Copyright IBM Corp. 2012,2016. All Rights Reserved.\n// Node module: foreman\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\nvar prog = require('child_process');\n\nvar cons = require('./console').Console;\n\nfunction startForward(port, hostname, emitter) {\n  var proc = prog.fork(__dirname + '/../forward.js', [], {\n    env: {\n      PROXY_PORT: port,\n      PROXY_HOST: hostname || '<ANY>'\n    }\n  });\n  cons.Alert('Forward Proxy Started in Port %d', port);\n  if(hostname) {\n    cons.Alert('Intercepting requests to %s through forward proxy', hostname);\n  } else {\n    cons.Alert('Intercepting ALL requests through forward proxy');\n  }\n  emitter.once('killall', function(signal) {\n    cons.Done('Killing Forward Proxy Server on Port %d',port);\n    proc.kill(signal);\n  });\n}\n\nmodule.exports.startForward = startForward;\n","/home/travis/build/npmtest/node-npmtest-foreman/node_modules/foreman/lib/exporters.js":"// Copyright IBM Corp. 2014,2016. All Rights Reserved.\n// Node module: foreman\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\nvar colors  = require('./colors');\nvar ppath   = require('path');\nvar mu      = require('mustache');\nvar fs      = require('fs');\n\nvar display = require('./console').Console;\n\n// Procfile to System Service Export //\n\nfunction render(filename, conf, callback) {\n  fs.readFile(filename, {encoding: 'utf8'}, function(err, template) {\n    if (err) {\n      throw err;\n    }\n    callback(mu.render(template, conf));\n  });\n}\n\nfunction templatePath(conf, type, file) {\n  if(conf.template) {\n    return ppath.resolve(conf.template, file);\n  } else {\n    return ppath.resolve(__dirname, type, file);\n  }\n}\n\nfunction writeout(path) {\n  return function(data) {\n    if (fs.existsSync(path)) {\n      display.Warn(colors.bright_yellow('Replacing: %s'), path);\n    }\n\n    fs.writeFileSync(path,data);\n    display.Alert('Wrote  :',ppath.normalize(path));\n  };\n}\n\nfunction upstart(conf, outdir) {\n  var path = outdir + \"/\" + conf.application + \".conf\";\n  render(templatePath(conf, 'upstart', 'foreman.conf'), conf, writeout(path));\n}\n\nfunction upstart_app(conf, outdir) {\n  var path = outdir + \"/\" + conf.application + \"-\" + conf.process + \".conf\";\n  render(templatePath(conf, 'upstart', 'foreman-APP.conf'), conf, writeout(path));\n}\n\nfunction upstart_app_n(conf, outdir) {\n  var path = outdir + \"/\" + conf.application + \"-\" + conf.process + \"-\" + conf.number + \".conf\";\n  render(templatePath(conf, 'upstart','foreman-APP-N.conf'), conf, writeout(path));\n}\n\nfunction upstart_single(conf, outdir) {\n  var path = outdir + \"/\" + conf.application + \".conf\";\n  render(templatePath(conf, 'upstart-single', 'foreman.conf'), conf, writeout(path));\n  display.Warn('upstart-single jobs attempt to raise limits and will fail ' +\n               'to  start if the limits cannot be raised to the desired ' +\n               'levels.  Some manual editing may be required.');\n}\n\nfunction upstart_single_app(conf, outdir) {\n  var path = outdir + \"/\" + conf.application + \"-\" + conf.process + \".conf\";\n  render(templatePath(conf, 'upstart-single', 'foreman-APP.conf'), conf, writeout(path));\n}\n\nfunction systemd(conf, outdir){\n  var path = outdir + \"/\" + conf.application + \".target\";\n  render(templatePath(conf, 'systemd', 'foreman.target'), conf, writeout(path));\n}\n\nfunction systemd_app(conf, outdir) {\n  var path = outdir + \"/\" + conf.application + \"-\" + conf.process + \".target\";\n  render(templatePath(conf, 'systemd', 'foreman-APP.target'), conf, writeout(path));\n}\n\nfunction systemd_app_n(conf, outdir) {\n  var path = outdir + \"/\" + conf.application + \"-\" + conf.process + \"-\" + conf.number + \".service\";\n  render(templatePath(conf, 'systemd', 'foreman-APP-N.service'), conf, writeout(path));\n}\n\nfunction supervisord(conf, outdir) {\n  var path = outdir + \"/\" + conf.application + \".conf\";\n  var programs = [];\n\n  // Supervisord requires comma separated lists and they are\n  // quite ugly to handle in Moustache.\n  for(var i = 0; i < conf.processes.length; i++) {\n    var process = conf.processes[i].process;\n    var n = conf.processes[i].n;\n\n    for(var j = 1; j <= n; j++) {\n      programs.push(conf.application + \"-\" + process + \"-\" + j);\n    }\n  }\n\n  conf.programs = programs.join(',');\n\n  render(templatePath(conf, 'supervisord', 'foreman.conf'), conf, writeout(path));\n}\n\nfunction supervisord_app_n(conf, outdir) {\n  var path = outdir + \"/\" + conf.application + \"-\" + conf.process + \"-\" + conf.number + \".conf\";\n  var envs = [];\n\n  // We have to do the same thing for env variables.\n  for(var i in conf.envs) {\n    var key = conf.envs[i].key;\n    var value = conf.envs[i].value;\n\n    // Some variables like 'web.1' breaks supervisor confg so we\n    // escape quotes and wrap values in quotes.\n    if(typeof value === 'string') {\n      value = value.replace(/\"/, '\\\\\"');\n    }\n\n    envs.push(key + \"=\" + '\"' + value  + '\"');\n  }\n\n  conf.envs = envs.join(',');\n\n  render(templatePath(conf, 'supervisord', 'foreman-APP-N.conf'), conf, writeout(path));\n}\n\nfunction smf_app(conf, outdir) {\n  var path = outdir + \"/\" + conf.application + \"-\" + conf.process + \".xml\";\n  render(templatePath(conf, 'smf', 'foreman-APP.xml'), conf, writeout(path));\n}\n\nvar export_formats = {\n  \"upstart\": {\n    foreman       : upstart,\n    foreman_app   : upstart_app,\n    foreman_app_n : upstart_app_n,\n  },\n  \"upstart-single\": {\n    foreman       : upstart_single,\n    foreman_app   : upstart_single_app,\n    foreman_app_n : function noop() {},\n  },\n  \"systemd\": {\n    foreman       : systemd,\n    foreman_app   : systemd_app,\n    foreman_app_n : systemd_app_n,\n  },\n  \"supervisord\": {\n    foreman       : supervisord,\n    foreman_app   : function noop() {},\n    foreman_app_n : supervisord_app_n,\n  },\n  \"smf\": {\n    foreman       : function noop() {},\n    foreman_app   : smf_app,\n    foreman_app_n : function noop() {},\n  }\n};\n\nmodule.exports = export_formats;\n","/home/travis/build/npmtest/node-npmtest-foreman/node_modules/foreman/forward.js":"// Copyright IBM Corp. 2012,2016. All Rights Reserved.\n// Node module: foreman\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\nvar http = require('http');\nvar url  = require('url');\nvar httpProxy = require('http-proxy');\n\nfunction startForward(proxy_port, proxy_host) {\n\n  var proxy = httpProxy.createProxyServer({});\n\n  var httpServer = http.createServer(function(req, res) {\n\n    var _url  = url.parse(req.url);\n\n    var dest  = _url.hostname;\n    var port  = _url.port || 80;\n    var host  = '127.0.0.1';\n\n    var target;\n    if(proxy_host === '<ANY>' || proxy_host === dest) {\n\n      target = {\n        host: host,\n        port: port\n      };\n\n      var urlmatch = req.url.match(/http:\\/\\/[^/]*:?[0-9]*(\\/.*)$/);\n\n      if(urlmatch) {\n        req.url = urlmatch[1];\n      } else {\n        req.url = '/';\n      }\n\n    } else {\n      target = {\n        host: dest,\n        port: port\n      };\n    }\n\n    proxy.web(req, res, {target: target});\n\n  });\n\n  proxy.on('upgrade', function (req, socket, head) {\n    proxy.ws(req, socket, head);\n  });\n\n  proxy.on('error', function(err, req, res){\n    console.error('Proxy Error: ', err);\n    res.writeHead(500);\n    res.write('Upstream Proxy Error');\n    res.end();\n  });\n\n  httpServer.listen(proxy_port);\n}\n\nstartForward(process.env.PROXY_PORT, process.env.PROXY_HOST);\n","/home/travis/build/npmtest/node-npmtest-foreman/node_modules/foreman/proxy.js":"// Copyright IBM Corp. 2012,2016. All Rights Reserved.\n// Node module: foreman\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\nvar fs      = require('fs');\nvar http    = require('http');\nvar https   = require('https');\nvar htproxy = require('http-proxy');\n\nvar port = parseInt(process.env.PORT);\n\nvar upstream_host = process.env.UPSTREAM_HOST;\nvar upstream_port = parseInt(process.env.UPSTREAM_PORT);\nvar upstream_size = parseInt(process.env.UPSTREAM_SIZE);\nvar sslCert       = process.env.SSL_CERT;\nvar sslKey        = process.env.SSL_KEY;\nvar sslPort       = parseInt(process.env.SSL_PORT);\n\nvar addresses = [];\nfor(var i = 0; i < upstream_size; i++) {\n  addresses.push({\n    host: upstream_host,\n    port: upstream_port + i,\n    protocol: 'http',\n  });\n}\n\n// Proxy\nvar proxy = htproxy.createProxyServer({\n  // Set the x-forwarded- headers, because apps often need them to make\n  // decisions (such as about redirecting to SSL or a canonical host),\n  // and proxies often do this for you in the real world.\n  xfwd: true\n});\n\n// Hanle Error\nproxy.on('error',function(err,req,res){\n  console.error(\"Proxy Error: \",err);\n  res.writeHead(500);\n  res.write(\"Upstream Proxy Error\");\n  res.end();\n});\n\n// Main HTTP Server\nhttp.createServer(function (req, res) {\n\n  var target = addresses.shift();\n\n  proxy.web(req, res, {target: target});\n\n  addresses.push(target);\n\n}).listen(port, function() {\n  process.send({http: this.address().port});\n});\n\nif (sslCert && sslKey) {\n  https.createServer({\n      key: fs.readFileSync(sslKey),\n      cert: fs.readFileSync(sslCert)\n    },\n    function (req, res) {\n\n    var target = addresses.shift();\n\n    proxy.web(req, res, {target: target});\n\n    addresses.push(target);\n\n  }).listen(sslPort, function() {\n    process.send({https: this.address().port});\n  });\n}\n"}